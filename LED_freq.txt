#include "stm32f4xx.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_tim.h"
void initialise_leds()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitTypeDef GPIOInitStruct;
	GPIOInitStruct.GPIO_Pin = GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
	GPIOInitStruct.GPIO_Mode = GPIO_Mode_OUT;
	GPIOInitStruct.GPIO_Speed = GPIO_Speed_100MHz;
	GPIOInitStruct.GPIO_OType = GPIO_OType_PP;
	GPIOInitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;

	GPIO_Init(GPIOD, &GPIOInitStruct);
}

void TM_TIMER_Init2(void) {
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    TIM_BaseStruct.TIM_Prescaler = 500;
    TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_BaseStruct.TIM_Period = 65535;
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_BaseStruct.TIM_RepetitionCounter = 0;
    /* Initialize TIM4 */
    TIM_TimeBaseInit(TIM2, &TIM_BaseStruct);
    /* Start count on TIM4 */
    TIM_Cmd(TIM2, ENABLE);
}
void TM_TIMER_Init1(void) {
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    TIM_BaseStruct.TIM_Prescaler = 1000;
    TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_BaseStruct.TIM_Period = 65535;
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_BaseStruct.TIM_RepetitionCounter = 0;
    /* Initialize TIM4 */
    TIM_TimeBaseInit(TIM3, &TIM_BaseStruct);
    /* Start count on TIM4 */
    TIM_Cmd(TIM3, ENABLE);
}
void TM_TIMER_Init3(void) {
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);
    TIM_BaseStruct.TIM_Prescaler = 2000;
    TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_BaseStruct.TIM_Period = 65535;
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_BaseStruct.TIM_RepetitionCounter = 0;
    /* Initialize TIM4 */
    TIM_TimeBaseInit(TIM13, &TIM_BaseStruct);
    /* Start count on TIM4 */
    TIM_Cmd(TIM13, ENABLE);
}
void TM_TIMER_Init4(void) {
    TIM_TimeBaseInitTypeDef TIM_BaseStruct;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
    TIM_BaseStruct.TIM_Prescaler = 4000;
    TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
    TIM_BaseStruct.TIM_Period = 65535;
    TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_BaseStruct.TIM_RepetitionCounter = 0;
    /* Initialize TIM4 */
    TIM_TimeBaseInit(TIM12, &TIM_BaseStruct);
    /* Start count on TIM4 */
    TIM_Cmd(TIM12, ENABLE);
}
int main(void)
{
	initialise_leds();
	TM_TIMER_Init1();
	TM_TIMER_Init2();
	TM_TIMER_Init3();
	TM_TIMER_Init4();
	long int a,b,c,d;
	GPIO_SetBits(GPIOD, GPIO_Pin_12);
	GPIO_SetBits(GPIOD, GPIO_Pin_13);
	GPIO_SetBits(GPIOD, GPIO_Pin_14);
	GPIO_SetBits(GPIOD, GPIO_Pin_15);
    while(1)
    {
    	a=TIM_GetCounter(TIM3);
    	b=TIM_GetCounter(TIM2);
    	c=TIM_GetCounter(TIM13);
    	d=TIM_GetCounter(TIM12);
    	if(a>32000)
    		{GPIO_SetBits(GPIOD,GPIO_Pin_12);}
    	else
    		{GPIO_ResetBits(GPIOD,GPIO_Pin_12);}
    	if(b>32000)
    	    		{GPIO_SetBits(GPIOD,GPIO_Pin_13);}
    	    	else
    	    		{GPIO_ResetBits(GPIOD,GPIO_Pin_13);}
    	if(c>32000)
    	    		{GPIO_SetBits(GPIOD,GPIO_Pin_14);}
    	    	else
    	    		{GPIO_ResetBits(GPIOD,GPIO_Pin_14);}
    	if(d>32000)
    	    		{GPIO_SetBits(GPIOD,GPIO_Pin_15);}
    	    	else
    	    		{GPIO_ResetBits(GPIOD,GPIO_Pin_15);}
    }
}
